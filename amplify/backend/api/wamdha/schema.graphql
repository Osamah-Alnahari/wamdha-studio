############################
# 1. Reading Models
############################

type Read @model
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: owner, operations: [create, read, update, delete] }
  ]) {
  id: ID!
  title: String!
  description: String
  thumbnailUrl: String!
  authorName: String!

  # Associate each Read with its owner
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])

  slides: [Slide] @hasMany(indexName: "byRead", fields: ["id"])
}

type Slide @model
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: owner, operations: [create, read, update, delete] }
  ]) {
  id: ID!
  readId: ID! @index(name: "byRead", sortKeyFields: ["slideNumber"])
  read: Read @belongsTo(fields: ["readId"])

  slideNumber: Int!
  text: String!
  imageUrl: String        # S3 key for this slideâ€™s image
}

############################
# 2. User Profile & Activity
############################

type User @model
  @auth(rules: [
    { allow: owner, ownerField: "id", operations: [create, read, update, delete] }
  ]) {
  id: ID!
  email: String!
  givenName: String!
  dailyStreak: Int!
  lastActive: AWSDateTime!

  reads:        [Read]             @hasMany(indexName: "byUser", fields: ["id"])
  progress:     [UserBookProgress] @hasMany(indexName: "byUser", fields: ["id"])
  achievements: [Achievement]      @hasMany(indexName: "byUser", fields: ["id"])
  badges:       [Badge]            @hasMany(indexName: "byUser", fields: ["id"])
}

type UserBookProgress @model
  @auth(rules: [
    { allow: owner, ownerField: "userId", operations: [create, read, update, delete] }
  ]) {
  userId: ID!
    @primaryKey(sortKeyFields: ["bookId"])
    @index(name: "byUser", queryField: "listUserBookProgressByUser", sortKeyFields: ["updatedAt"])
  bookId: ID!
  user: User @belongsTo(fields: ["userId"])
  lastSlideNumber: Int!
  updatedAt: AWSDateTime!
  isSaved: Boolean
  isFinished: Boolean
}

type Achievement @model
  @auth(rules: [
    { allow: owner, ownerField: "userId", operations: [create, read, update, delete] }
  ]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])

  name: String!
  description: String
  unlockedAt: AWSDateTime!
}

type Badge @model
  @auth(rules: [
    { allow: owner, ownerField: "userId", operations: [create, read, update, delete] }
  ]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])

  name: String!
  iconUrl: String        # S3 key for badge icon
  earnedAt: AWSDateTime!
}
